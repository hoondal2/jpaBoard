
## JPA 스터디

1. 웹 개발자들은 DB 관련 로직을 작성하는데 많은 시간을 쏟을 수 밖에 업슨데, 작성되는 로직에는
    반복적인 코드가 많을 뿐더러, 생산성 면에서 오래도록 문제가 되어왔다.
2. JPA란?
    - 자바 객체와 DB 테이블 간의 매핑을 처리하는 ORM(Object Relational Mapping) 기술의 표준
    - JPA에서는 테이블과 매핑되는 테이블 구조화 클래스를 엔티티 클래스라고 한다.
    - 즉 엔티티 클래스 자체를 테이블이라고 생각하면 된다.




## 이외에 알아본 것

1. Hikari CP(히카리 커넥션풀)

    - JDBC ?
        JDBC는 자바에서 데이터베이스에 접속할 수 있도록하는 자바 API이다.
        DB에서 자료를 쿼리하거나 업데이트하는 방법을 제공한다.

    - DB 커넥션 풀이란?
        일반적인 데이터 연동과정은 웹 어플리케이션이 필요할 때마다 데이터베이스에 연결하여
        작업하는 방식이다. 하지만 이런식으로 필요할 때마다 연동 작업할 경우, DB 연결에 시간이 많이 걸리는 문제가 발생.
        이 문제를 해결하기 위해 현재는 웹앱이 실행됨과 동시에 연동할 DB와의 연결을 미리 설정해둔다.
        그리고 필요할 때마다 미리 연결해놓은 상태를 이용해 빠르게 DB와 연동, 작업한다.
        이렇게 미리 DB와 연결시킨 상태를 유지하는 기술을 커넥션 풀이라고 한다.

        자바에서는 기본적으로 DataSource 인터페이스를 사용하여 커넥션풀을 관리한다.
        스프링에서는 사용자가 직접 커넥션을 관리할 필요없이 자동화된 기법들을 제공하는데,
        SpringBoot 2.0 이전에는 tomcat-jdbc를 사용
        현재 2.0 이후부터는 HikariCP를 기본옵션으로 채택하고 있다.

    - 왜 Hikari CP?
        다른 커넥션풀 관리 프레임워크보다 월등한 성능을 가졌다. 이유는 커넥션풀의 관리 방법에 있다.
        히카리는 Connection 객체를 한번 Wrapping한 PoolEntry로 Connection을 관리하며,
        이를 관리하는 ConcurrentBag이라는 구조체를 사용하고 있다.

        HikariPool.getConnection() -> ConcurrentBag.borrow() 라는 메서드를 통해 사용가능한 Connection을 리턴하도록 되어있다.
        이 과정에서 커넥션 생성을 요청한 스레드의 정보를 저장해두고 다음에 접근시 저장된 정보를 이용해 빠르게 반환해준다.

        spring-boot-starter-jdbc, spring-boot-starter-data-jpa를 사용한다면 히카리에 의존한다.

        데드락 이슈가 있고, 이를 피하기 위한 pool사이즈 커스텀 공식이 있다.

    출처 : https://velog.io/@miot2j/Spring-DB%EC%BB%A4%EB%84%A5%EC%85%98%ED%92%80%EA%B3%BC-Hikari-CP-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0


2. Enum 클래스
    - Enum 클래스?
        final 로 String과 같은 문자열이나 숫자들을 나타내는 기본 자료형의 값을 고정할 수 있따.
        이렇게 고정된 값을 "상수"라고 하고, 영어로는 constant라고 한다.
        클래스가 상수만으로 만들어져 있을 경우, class 라고 선언하는 부분에 enum이라고 선언하면 "이 객체는 상수의 집합이다"라는 것을 명시적으로 나타낸다.
        enum은 enumeration이라는 "셈, 계산, 열거"라는 영어 단어의 앞부분만 따서 만들어진 예약어이다.
        어떻게 보면 타입이지만 클래스의 일종이다.

        변수들을 별도로 타입을 지정할 필요도 없고, 값을 지정할 필요도 없다.
        상수들만 선언하면 가장 마지막에 있는 세미콜론도 필요없다.

    - enum 타입을 어떻게 메소드에 전달할까?
        별도의 생성자가 필요없다.
        enum 타입은 "enum 클래스이름.상수 이름"을 지정함으로써 클래스의 객체 생성이 완료된다고 생각하면 된다다

    - 장점
        - 허용 가능한 값들을 제한할 수 있다
        - 리팩토링 시 변경 범위가 최소화 된다
            -> 내용의 추가가 필요하더라도, enum 코드 외에 수정할 필요가 없다

3. 스트림 Stream
    - Stream?
        자바 8에서 추가한 스트림은 람다를 활용할 수 있는 기술 중 하나이다.
        for 또는 foreach문을 돌면서 요소 하나씩 꺼내서 다루는 방법이 있지만, 간단한 경우가 아닐경우
        로직이 복잡해질수록 코드의 양이 많아져 여러 로직이 섞이게 되고, 메소드를 나눌 경우 루프를 여러 번 도는 경우가 발생한다.

        스트림은 '데이터의 흐름'이다. 배열 또는 컬렉션 인스턴스에 함수 여러개를 조합해서,
        원하는 결과를 필터링하고 가공된 결과를 얻을 수 있다.
        또한 람다를 이용해서 코드의 양을 줄이고 간결하게 표현할 수 있다.
        -> 즉, 배열과 컬렉션을 함수형으로 처리할 수 있다.

